services:
  orders:
    build:
      context: .
      dockerfile: ./apps/orders/Dockerfile
      target: development
    networks:
      - app-network
    command: npm run start:dev orders
    env_file:
      - ./apps/orders/.env
    depends_on:
      - postgres
      - billing
      - auth
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3000:3000'
    container_name: orders
  billing:
    build:
      context: .
      dockerfile: ./apps/billing/Dockerfile
      target: development
    networks:
      - app-network
    command: npm run start:dev billing
    env_file:
      - ./apps/billing/.env
    depends_on:
      - postgres
      - rabbitmq
      - auth
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    container_name: billing
  auth:
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
      target: development
    networks:
      - app-network
    command: npm run start:dev auth
    env_file:
      - ./apps/auth/.env
    depends_on:
      - postgres
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '4001:4001'
    container_name: auth
  postgres:
    image: postgres
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    networks:
      - app-network
    volumes:
      - postgres:/var/lib/postgresql/data
    container_name: postgres
  rabbitmq:
    image: rabbitmq
    ports:
      - '5672:5672'
    networks:
      - app-network
    container_name: rabbitmq
volumes:
  postgres:
    driver: local
networks:
  app-network:
    driver: bridge